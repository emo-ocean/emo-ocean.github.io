{"singlePage": [], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "", "style": "", "head": "", "indexScript": "", "indexStyle": "", "bottomText": "", "showPostSource": 1, "iconList": {}, "UTC": 8, "rssSplit": "sentence", "exlink": {}, "needComment": 1, "allHead": "", "title": "Emo-Ocean's Blog", "subTitle": "Exploring Concepts and Innovations", "avatarUrl": "https://avatars.githubusercontent.com/u/116006682?v=4", "GMEEK_VERSION": "last", "postListJson": {"P2": {"htmlDir": "docs/post/SMTP-shi-yan.html", "labels": ["bug", "enhancement"], "postTitle": "SMTP\u5b9e\u9a8c", "postUrl": "post/SMTP-shi-yan.html", "postSourceUrl": "https://github.com/emo-ocean/emo-ocean.github.io/issues/2", "commentNum": 0, "wordCount": 7214, "description": "# Computer Network SMTP Lab\r\n### email\uff1azehaiyu589@gmail.com \uff08\u6e90\u7801\u6587\u7ae0\u6700\u540e\u9644\u6709\uff09\r\n### programming assignment : [SMTP.pdf](https://github.com/user-attachments/files/16276898/SMTP.pdf)\r\n### programming assignment and others from \ud83e\udd47 https://media.pearsoncmg.com/ph/esm/ecs_kurose_compnetwork_8/cw/\r\n\r\n## \u7a0b\u5e8f\u5927\u81f4\u6d41\u7a0b \ud83d\udc4d \r\n\r\n> \u5efa\u7acbTCP\u8fde\u63a5\u3002", "top": 0, "createdAt": 1721278143, "style": "", "script": "", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/116006682?v=4", "createdDate": "2024-07-18", "dateLabelColor": "#bc4c00"}, "P3": {"htmlDir": "docs/post/Data Compression.html", "labels": ["enhancement", "question"], "postTitle": "Data Compression", "postUrl": "post/Data%20Compression.html", "postSourceUrl": "https://github.com/emo-ocean/emo-ocean.github.io/issues/3", "commentNum": 0, "wordCount": 2933, "description": "# \u6570\u636e\u538b\u7f29\r\n\r\n## Huffman coding:\r\n \u5728\u54c8\u592b\u66fc\u7f16\u7801\u4e2d\uff0c\u9996\u5148\u4f1a\u7edf\u8ba1\u6587\u4ef6\u4e2d\u5404\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u6765\u4ee3\u8868\u6743\u91cd\uff0c\u800c\u6743\u91cd\u5927\u7684\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u66f4\u591a\uff0c\u7528\u4ee5\u66f4\u77ed\u7684\u7f16\u7801\u5e8f\u5217\uff08\u4e5f\u5c31\u662f\u66f4\u9760\u8fd1\u6839\u8282\u70b9\u7684\u5c42\u6b21\uff09\u53ef\u4ee5\u8ba9\u538b\u7f29\u540e\u7684\u6570\u636e\u89c4\u6a21\u66f4\u5c0f\r\n\r\n\r\n```python\r\n# \u6784\u5efa\u54c8\u592b\u66fc\u6811\r\nfrom collections import Counter\r\nimport heapq\r\n\r\n\r\nclass Node:\r\n    def __init__(self, char, freq):\r\n        self.char = char\r\n        self.freq = freq\r\n        self.left = None\r\n        self.right = None\r\n\r\n    # \u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\uff0c\u4f7f\u5f97Node\u7c7b\u53ef\u4ee5\u5728\u4f18\u5148\u961f\u5217\u4e2d\u6392\u5e8f\r\n    def __lt__(self, other):\r\n        return self.freq < other.freq\r\n\r\n\r\ndef build_huffman_tree(text_build):\r\n    frequency = Counter(text_build)\r\n    heap = [Node(char, freq) for char, freq in frequency.items()]\r\n    heapq.heapify(heap)\r\n\r\n    while len(heap) > 1:\r\n        node1 = heapq.heappop(heap)\r\n        node2 = heapq.heappop(heap)\r\n        merged = Node(None, node1.freq + node2.freq)\r\n        merged.left = node1\r\n        merged.right = node2\r\n        heapq.heappush(heap, merged)\r\n\r\n    return heap[0]\r\n\r\n\r\n# \u521b\u5efa\u54c8\u592b\u66fc\u7f16\u7801\u8868\r\ndef build_codes_table(root_build):\r\n    codes = {}\r\n\r\n    def build_codes(node, current_code):\r\n        if node is None:\r\n            return\r\n\r\n        if node.char is not None:\r\n            codes[node.char] = current_code\r\n\r\n        build_codes(node.left, current_code + '0')\r\n        build_codes(node.right, current_code + '1')\r\n\r\n    build_codes(root_build, '')\r\n    return codes\r\n\r\n\r\n# \u538b\u7f29\u6570\u636e\r\ndef huffman_compress(text_compress):\r\n    root_compress = build_huffman_tree(text_compress)\r\n    codes_table_c = build_codes_table(root_compress)\r\n    encoded_text = ''.join(codes_table_c[char] for char in text_compress)\r\n    return encoded_text, codes_table_c, root_compress\r\n\r\n\r\n# \u89e3\u538b\u6570\u636e\r\ndef huffman_decompress(encoded_text, root_decompress):\r\n    decoded_text = []\r\n    node = root_decompress\r\n    for bit in encoded_text:\r\n        if bit == '0':\r\n            node = node.left\r\n        else:\r\n            node = node.right\r\n\r\n        if node.left is None and node.right is None:\r\n            decoded_text.append(node.char)\r\n            node = root_decompress\r\n\r\n    return ''.join(decoded_text)\r\n\r\n\r\n# \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6587\u672c\u6570\u636e\uff0c\u4f7f\u7528 utf-8 \u7f16\u7801\r\ndef read_text_from_file(file_path):\r\n    with open(file_path, 'r', encoding='utf-8') as file:\r\n        return file.read()\r\n\r\n\r\n# \u5c06\u6570\u636e\u5199\u5165\u6587\u4ef6\uff0c\u4f7f\u7528 utf-8 \u7f16\u7801\r\ndef write_to_file(data, file_path):\r\n    with open(file_path, 'w', encoding='utf-8') as file:\r\n        file.write(data)\r\n\r\n\r\n# \u793a\u4f8b\u4f7f\u7528\r\nif __name__ == '__main__':\r\n    # \u8bfb\u53d6\u8f93\u5165\u6587\u4ef6\r\n    input_text = read_text_from_file('source.txt')\r\n\r\n    # \u538b\u7f29\u6570\u636e\r\n    compressed, codes_table, root = huffman_compress(input_text)\r\n\r\n    # \u5199\u5165\u538b\u7f29\u540e\u7684\u6570\u636e\u548c\u7f16\u7801\u8868\u5230\u6587\u4ef6\r\n    write_to_file(compressed, 'compressed.txt')\r\n    write_to_file(str(codes_table), 'codes_table.txt')\r\n\r\n    # \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u538b\u7f29\u6570\u636e\u8fdb\u884c\u89e3\u538b\u7f29\uff08\u8fd9\u91cc\u4e3a\u4e86\u6f14\u793a\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u53d8\u91cf\uff09\r\n    compressed_data = read_text_from_file('compressed.txt')\r\n\r\n    # \u89e3\u538b\u6570\u636e\r\n    decompressed = huffman_decompress(compressed_data, root)\r\n\r\n    # \u5199\u5165\u89e3\u538b\u7f29\u540e\u7684\u6570\u636e\u5230\u6587\u4ef6\r\n    write_to_file(decompressed, 'decompressed.txt')\r\n\r\n    print('Compression and decompression completed.')\r\n\r\n`\u3002", "top": 0, "createdAt": 1723796106, "style": "", "script": "", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/116006682?v=4", "createdDate": "2024-08-16", "dateLabelColor": "#bc4c00"}}, "singeListJson": {}, "labelColorDict": {"bug": "#d73a4a", "documentation": "#0075ca", "duplicate": "#cfd3d7", "enhancement": "#a2eeef", "good first issue": "#7057ff", "help wanted": "#008672", "invalid": "#e4e669", "question": "#d876e3", "wontfix": "#ffffff"}, "displayTitle": "Emo-Ocean's Blog", "faviconUrl": "https://avatars.githubusercontent.com/u/116006682?v=4", "ogImage": "https://avatars.githubusercontent.com/u/116006682?v=4", "primerCSS": "<link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' />", "homeUrl": "https://emo-ocean.github.io", "prevUrl": "disabled", "nextUrl": "disabled"}